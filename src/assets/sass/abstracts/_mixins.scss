// @mixin media ($breakpoint) {
//     @if map-has-key($breakpoints, $breakpoint) {
//         $breakpoint-value: map-get($breakpoints, $breakpoint);
//         @media (min-width: $breakpoint-value){
//             @content;
//         }
//     }
//     @else {
//         @warn 'Invalid breakpoint provided';
//     }
// }

// Media Query - min-width for mobile-first design
@mixin media($breakpoint){
    @media (min-width: $breakpoint) {
        @content
    }
};

@mixin base-margin {

    margin-inline: 50px;
    margin-block: 35px;

    @include media($screen-sm) {
        margin-inline: 250px;
        margin-block: 50px;
    }
};


// general mixins for ease-of-use
@mixin flex-col {
    display: flex;
    flex-direction: column;
}
@mixin flex {
    display: flex;
    flex-direction: row;
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// for when using ::before and ::after
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

// Idk, I kinda wanna see if this is usable for speech bubbles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

// ==============================
// Font size mixin
// ==============================

//  default font scale bounding
$font-lock-min:  400px !default; 
$font-lock-max: 1000px !default;

//  font-size 
@mixin font-size(
  $min,                         // font-size 
  $max: null,                   // optional maximum font size
  $lock-min: $font-lock-min,  // optional minimum viewport width 
  $lock-max: $font-lock-max   // optional maximum viewport width 
  ){
    & { font-size: $min; }
    @if $max {
      @media (min-width: $lock-min) { 
        & { 
          font-size: calc(
            #{$min} + 
            #{num($max) - _num($min)} * 
            (100vw - #{$lock-min}) / 
            #{num($lock-max) - num($lock-min)}
          ); 
        } 
      }
      @media (min-width: $lock-max){ 
        & { font-size: $max; } 
      }
    }
}